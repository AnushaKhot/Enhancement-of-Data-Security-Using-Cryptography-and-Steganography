%create a seperate file and name it as mod_exp.m
function result = mod_exp(base, exponent, modulus)
    result = ones(size(base));
    while any(exponent > 0)
        odd_exponent_indices = exponent > 0;
        result(odd_exponent_indices) = mod(result(odd_exponent_indices) .* base(odd_exponent_indices), modulus);
        base = mod(base.^2, modulus);
        exponent = floor(exponent / 2);
    end
end
%create another file and name it as modinv.m
function inv = modinv(a, m)
    for inv = 1:m-1
        if mod(a * inv, m) == 1
            return;
        end
    end
end

clc;
clear all;
disp('RSA cryptosystem');
range_min = input('enter lower limit for primes: ');
range_max = input('enter upper limit for primes: ');
l = primes(range_max);
l = l(l >= range_min);
p = l(randperm(numel(l), 1));
q = l(randperm(numel(l), 1));
disp(['prime p   = ', num2str(p)]);
disp(['prime q   = ', num2str(q)]);
n = q * p;
pause(1);
disp(['n = p * q = ', num2str(n)]);
pause(1);
phi_n = ((p - 1) * (q - 1));
disp(['Ï†(n)      = ', num2str(phi_n)]);
e = 2;
num = 0;
for e = 2:(phi_n - 1)
    if (gcd(e, phi_n) == 1)
        num = num + 1;
        list(num) = e;
    end
end
e = list(randperm(numel(list), 1));
pause(1);
disp(['e = ', num2str(e)]);
d = 0;
while (mod(d * e, phi_n) ~= 1)
    d = d + 1;
end
pause(1);
disp(['d = ', num2str(d)]);
pause(1);
disp(['public key of the current system {', num2str(e), ' , ', num2str(n), '}']);
pause(1);
disp(['private key of the current system {', num2str(d), ' , ', num2str(n), '}']);
pause(0.5);
disp('----------------------------------------');
pause(0.5)
disp('----------------------------------------');
pause(0.5)
m = input('\nEnter message to be encrypted: ', 's');
m_ascii = double(m);
pause(0.5)
disp('----------------------------------------');
pause(0.5)
disp('----------------------------------------');
pause(0.5)
disp('ASCII equivalent of the message');
pause(0.5)
disp(m_ascii);

for i = 1:length(m_ascii)
    encrypted_message(i) = powermod(m_ascii(i), e, n);
    disp(['block ' num2str(i), ' of the message has been encrypted...']);
    pause(0.5);
end
disp('encrypted message');
disp(encrypted_message);

% Load and display the original image for LSB
originalImagePath = 'C:\Users\Anusha\Downloads\image (8).png'; % Replace with the actual path
originalImage = imread(originalImagePath);
imshow(originalImage);
title('Original Image');

% Embed the encrypted message in the original image using LSB steganography
stego_image = originalImage;
stego_index = 1;
for i = 1:size(originalImage, 1)
    for j = 1:size(originalImage, 2)
        for k = 1:size(originalImage, 3)
            if stego_index <= numel(encrypted_message)
                stego_image(i, j, k) = bitset(originalImage(i, j, k), 1, bitget(encrypted_message(stego_index), 1));
                stego_index = stego_index + 1;
            end
        end
    end
end

% Display the stego image
imshow(stego_image);
title('Stego Image');

% Encrypt the stego image
encrypted_stego_image = mod_exp(stego_image, e, n);

% Step 3: Load and display the cover image for LSB
coverImagePath = 'C:\Users\Anusha\Downloads\image (9).png'; % Replace with the actual path
coverImage = imread(coverImagePath);
figure;
imshow(coverImage);
title('Cover Image');

% Ensure the size of encrypted_stego_image matches the size of the coverImage
desiredSize = size(coverImage(:,:,1)); % Use the size of the cover image
encrypted_stego_image_resized = imresize(encrypted_stego_image, desiredSize);

% Embed the encrypted stego image into the cover image using LSB steganography
stego_cover_image = coverImage;
stego_index = 1;
bitPlane = 1; % Choose the bit plane to hide the data (1 = least significant bit)

for i = 1:size(coverImage, 1)
    for j = 1:size(coverImage, 2)
        for k = 1:size(coverImage, 3)
            if stego_index <= numel(encrypted_stego_image_resized)
                stego_cover_image(i, j, k) = bitset(coverImage(i, j, k), bitPlane, bitget(encrypted_stego_image_resized(stego_index), bitPlane));
                stego_index = stego_index + 1;
            end
        end
    end
end

% Display the stego cover image
figure;
imshow(stego_cover_image);
title('Stego Image Embedded into Cover Image');
 % Save the stego cover image
stegoCoverImageSavePath = 'path_to_save_stego_cover_image.png'; % Replace with the desired save path
imwrite(stego_cover_image, stegoCoverImageSavePath);

disp(['Stego cover image has been saved to: ' stegoCoverImageSavePath]);

 % Step 5: Extract the original image from the stego image
extractedHiddenBits = bitget(stego_cover_image(:,:,1), bitPlane);
extractedImage = originalImage;
extractedImage(:,:,1) = uint8(bitset(extractedImage(:,:,1), bitPlane, extractedHiddenBits));

% Display the extracted image
figure;
imshow(extractedImage);
title('Extracted Image');
pause(0.5)
disp('----------------------------------------');
pause(0.5)
disp('----------------------------------------');
disp('press a key to decrypt the message');
pause;
pause(0.5)
disp('----------------------------------------');
pause(0.5)
disp('----------------------------------------');
for i = 1:length(encrypted_message)
    decrypted_message(i) = powermod(encrypted_message(i), d, n);
    disp(['block ' num2str(i), ' of the message has been decrypted...']);
    pause(0.5);
end
disp('ASCII equivalent of the decrypted message');
disp(decrypted_message);
pause(0.5)
disp('----------------------------------------');
pause(0.5)
disp('----------------------------------------');
pause(1)
disp('decrypted message');
disp(char(decrypted_message));
